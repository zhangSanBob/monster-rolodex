{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","handleChange1","e","setState","searchFiled","target","value","state","handleChange0","bind","fetch","then","response","json","users","console","log","this","filterdMonsters","filter","toLowerCase","includes","onClick","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2UAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,eAER,6BAAKJ,EAAMG,QAAQE,OACnB,8BAAIL,EAAMG,QAAQG,MAAlB,WCJKC,EAAW,SAACP,GACrB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,U,MCD5B,IAAMM,EAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOX,UAAU,SAASY,KAAK,SAASF,YAAaA,EAAaG,SAAUF,KCyCjEG,G,wDA3Cb,aAAe,IAAD,8BACZ,gBAwBFC,cAAgB,SAACC,GACf,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SAvBtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAGf,EAAKP,aAAe,EAAKW,cAAcC,KAAnB,gBARR,E,qDAWd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAEV,SAAUqB,S,2BAK7C,SAAcZ,GACZa,QAAQC,IAAI,mB,oBASd,WACE,MAAkCC,KAAKV,MAA/Bd,EAAR,EAAQA,SAAUW,EAAlB,EAAkBA,YACZc,EAAkBzB,EAAS0B,QAAO,SAAA/B,GAAO,OAAIA,EAAQE,KAAK8B,cAAcC,SAASjB,EAAYgB,kBACnG,OACE,sBAAKlC,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWU,YAAY,iBACrBC,aAAcoB,KAAKpB,eACrB,cAAC,EAAD,CAAUJ,SAAUyB,IACpB,wBAAQI,QAASL,KAAKpB,aAAtB,6B,GAvCU0B,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.029640fa.chunk.js","sourcesContent":["import React from 'react';\nimport './card-styles.css';\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img src={`https://robohash.org/${props.monster.id}?set=set3`}></img>\n        \n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email} </p>\n    </div>\n)","import React from 'react';\nimport './card-list.styles.css';\nimport {Card} from '../card/card.component'\n\nexport const CardList = (props) => {\n    return(\n        <div className='card-list'>\n            {props.monsters.map(monster => (\n                <Card key={monster.id} monster={monster} />\n            ))}\n        </div>\n    );\n}","import React from 'react';\nimport './search-box.styles.css';\n\nfunction App() {\n    return <h1>Hi </h1>\n}\n\nexport const SearchBox = ({placeholder, handleChange} )=> (\n    <input className='search' type='search' placeholder={placeholder} onChange={handleChange} />\n);","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchFiled: ''\n    }\n\n    this.handleChange = this.handleChange0.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n\n  // need to bind `this` in the constructor.\n  // this.handleChange = this.handleChange.bind(this);\n  handleChange0(e) {\n    console.log('test for bind');\n    // this.setState({searchFiled : e.target.value});\n  }\n\n  // (e) is an arrow function. When the error is detected, `this` will be bind with the first context it was defined.\n  handleChange1 = (e) => {\n    this.setState({searchFiled : e.target.value});\n  }\n\n  render() {\n    const { monsters, searchFiled } = this.state;\n    const filterdMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchFiled.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox placeholder='search monster'\n          handleChange={this.handleChange} />\n        <CardList monsters={filterdMonsters} />\n        <button onClick={this.handleChange}> button </button>\n      </div>\n    );\n  }\n}\nexport default App;\n\n// button 1: button 1 click\n// button 2: button 3 click\n// button 3: button 3 click\n// button 4: button 3 click","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}